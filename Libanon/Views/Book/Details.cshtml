
@model Libanon.Models.DTO.BookDTO
@{
    ViewBag.Title = "Details";
}

<form method="post">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id, new { @id = "bookId" })
    <div class="border p-3 mt-4">
        <div class="row pb-2">
            <h2 class="text-primary">Details Book</h2>
            <hr />
        </div>
        <div class="text-center">
            <img src="@{@Model.ImageUrl}" style="max-width: 300px" class="rounded" alt="@{@Model.Title}">
        </div>
        <div class="row">
            <div class="form-group mb-3 col-6">
                @Html.LabelFor(b => b.Title) <br />
                @Html.TextBoxFor(b => b.Title, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(b => b.Title, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mb-3 col-6">
                @Html.LabelFor(b => b.ImageUrl) <br />
                @Html.TextBoxFor(b => b.ImageUrl, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(b => b.ImageUrl, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mb-3 col-6">
                @Html.LabelFor(b => b.Author) <br />
                @Html.TextBoxFor(b => b.Author, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(b => b.Author, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mb-3 col-6">
                @Html.LabelFor(b => b.Description) <br />
                @Html.TextAreaFor(b => b.Description, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(b => b.Description, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mb-3 col-6">
                @Html.LabelFor(b => b.ISBN) <br />
                @Html.TextBoxFor(b => b.ISBN, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(b => b.ISBN, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mb-3 col-6">
                @Html.LabelFor(b => b.Category) <br />
                @Html.TextBoxFor(b => b.Category, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(b => b.Category, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mb-3 col-6">
                @Html.LabelFor(b => b.IssuedYear) <br />
                @Html.TextBoxFor(b => b.IssuedYear, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(b => b.IssuedYear, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mb-3 col-6">
                @Html.LabelFor(b => b.AverageRating) <br />
                @Html.TextBoxFor(b => b.AverageRating, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(b => b.AverageRating, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mb-3 col-6">
                @Html.LabelFor(b => b.Owner.Email, "Owner Email") <br />
                @Html.TextBoxFor(b => b.Owner.Email, new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(b => b.Owner.Email, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mb-3 col-6">
                <label for="rating">Rating:</label>
                <select class="form-select" id="rating" name="Rating">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                </select>
            </div>
            <div class="form-group mb-3 col-6">
                <label for="borrowerName">Borrower Name</label>
                <input type="text" id="borrowerName" class="form-control"/>
            </div>
            <div class="form-group mb-3 col-6">
                <label for="borrowerEmail">Borrower Email</label>
                <input type="text" id="borrowerEmail" class="form-control"/> </div>
            <div class="form-group mb-3 col-6">
                <label for="borrowerPhone">Borrower PhoneNumber</label>
                <input type="text" id="borrowerPhone" class="form-control"/> </div>
            @{
                if (Model.Borrower != null)
                {
                    <div class="form-group mb-3 col-6">
                        <label for="note">Note</label>
                        <input type="text" id="note" class="form-control"/> </div>
                }
            }
        </div>
        <a href="@Url.Action("Index", "Book")" class="btn btn-secondary" style="width: 150px">
            Back to List
        </a>
        @{
            var tm = "#myModal" + Model.Id;
            var mid = "myModal" + Model.Id;
        }
        <button type="button" data-bs-toggle="modal" data-bs-target="@tm" class="btn btn-danger">
            Delete
        </button>
        @{
            if (Model.Borrower == null)
            {
                <button onclick="submitBorrow()" class="btn btn-primary float-end ml-3" type="button">Submit Borrow</button>
            }
            else
            {
                <button onclick="submitReturn()" class="btn btn-primary float-end ml-3" type="button">Return Book</button>
            }
        }
        <button  class="btn btn-secondary float-end" onclick="submitRating()" type="button">Submit Rating</button>

        @*Modal*@
        <div class="modal fade" id="@mid" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="myModalLabel">Delete Confirmation</h4>
                        <button type="button" class="close" data-bs-dismiss="modal" aria-hidden="true">&times;</button>
                    </div>
                    <div class="modal-body">
                        Are you sure want to delete this item?
                    </div>
                    <div class="modal-footer">
                        <a href="@Url.Action("Delete", "Book", new {id = Model.Id})" id="deleteBtn" class="btn bg-danger mr-1">Delete</a>
                        <a class="btn btn-primary mr-1" data-bs-dismiss="modal">Close</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
@section scripts
{
    <script>
        function submitRating() {

            var rating = document.getElementById("rating").value;
            var bookId = document.getElementById("bookId").value;
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/Book/Rating", true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (this.readyState == XMLHttpRequest.DONE && this.status == 200) {
                    location.reload();
                }
            }
            xhr.send(JSON.stringify({ Rating: rating, BookId: bookId }));
        }
        function submitBorrow() {
            var name = document.getElementById("borrowerName").value;
            var email = document.getElementById("borrowerEmail").value;
            var phone = document.getElementById("borrowerPhone").value;
            var bookId = document.getElementById("bookId").value;
            var xhr = new XMLHttpRequest();
            xhr.open("POST", `/Book/Borrow/${bookId}`, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (this.readyState == XMLHttpRequest.DONE && this.status == 200) {
                    location.reload();
                }
            }
            xhr.send(JSON.stringify({ Name: name, PhoneNumber: phone, Email: email }));
        }
        function submitReturn() {
            var name = document.getElementById("borrowerName").value;
            var email = document.getElementById("borrowerEmail").value;
            var phone = document.getElementById("borrowerPhone").value;
            var bookId = document.getElementById("bookId").value;

            var xhr = new XMLHttpRequest();
            xhr.open("POST", `/Book/Return/${bookId}`, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (this.readyState == XMLHttpRequest.DONE && this.status == 200) {
                    location.reload();
                }
            }
            xhr.send(JSON.stringify({ Name: name, PhoneNumber: phone, Email: email }));
        }
    </script>
}
